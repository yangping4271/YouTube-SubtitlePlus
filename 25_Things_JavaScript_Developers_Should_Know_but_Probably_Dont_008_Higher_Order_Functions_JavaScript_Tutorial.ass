[Script Info]
; This is an Advanced Sub Station Alpha v4+ script.
Title:
ScriptType: v4.00+
Collisions: Normal
PlayDepth: 0

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Noto Serif,18,&H0000FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,2,1,1,7,1
Style: Secondary,宋体-简 黑体,11,&H0000FF00,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,2,1,1,7,1

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,00:00:00.240,00:00:04.320,Secondary,,0,0,0,,如果你使用术语 higher order functions，你就是个酷人。
Dialogue: 0,00:00:04.320,00:00:06.800,Secondary,,0,0,0,,是的，我只是希望你知道它是什么意思。
Dialogue: 0,00:00:06.800,00:00:08.480,Secondary,,0,0,0,,所以，higher order functions。
Dialogue: 0,00:00:08.480,00:00:12.320,Secondary,,0,0,0,,在本视频中，我会告诉你它们是什么以及为什么有用。
Dialogue: 0,00:00:12.480,00:00:15.600,Secondary,,0,0,0,,以及你如何利用它们为自己谋利。
Dialogue: 0,00:00:15.600,00:00:19.680,Secondary,,0,0,0,,这是一套10集系列，我称之为 '10 Things JavaScript Developers Should Know'，但你可能不会。
Dialogue: 0,00:00:19.680,00:00:21.040,Secondary,,0,0,0,,但你可能不会。
Dialogue: 0,00:00:21.040,00:00:24.480,Secondary,,0,0,0,,这是第8集：Higher Order Functions。
Dialogue: 0,00:00:24.800,00:00:28.880,Secondary,,0,0,0,,而且，我现在在我的新 studio，稍后我会谈谈。
Dialogue: 0,00:00:28.880,00:00:30.080,Secondary,,0,0,0,,开始吧。
Dialogue: 0,00:00:38.000,00:00:42.160,Secondary,,0,0,0,,higher order functions 在过去几年里受到了很多关注。
Dialogue: 0,00:00:42.160,00:00:44.000,Secondary,,0,0,0,,过去几年里，它们被广泛使用。
Dialogue: 0,00:00:44.080,00:00:47.280,Secondary,,0,0,0,,在许多新模式中，它们似乎已经来到 JavaScript，
Dialogue: 0,00:00:47.280,00:00:50.080,Secondary,,0,0,0,,主要归功于函数式编程。
Dialogue: 0,00:00:50.080,00:00:53.600,Secondary,,0,0,0,,并且在很大程度上，感谢这位伙计 React。
Dialogue: 0,00:00:53.760,00:00:55.760,Secondary,,0,0,0,,我看到了你，React 伙伴们。
Dialogue: 0,00:00:55.760,00:01:01.120,Secondary,,0,0,0,,现在，React 并没有真正发明这些模式；它只是把它们普及了。
Dialogue: 0,00:01:01.120,00:01:02.640,Secondary,,0,0,0,,所以，higher order functions。
Dialogue: 0,00:01:02.640,00:01:07.680,Secondary,,0,0,0,,一个 higher order function 是一个接受另一个函数作为参数的函数。
Dialogue: 0,00:01:07.920,00:01:10.960,Secondary,,0,0,0,,或者返回一个函数给你。
Dialogue: 0,00:01:10.960,00:01:13.120,Secondary,,0,0,0,,一旦它完成了它应该完成的工作。
Dialogue: 0,00:01:13.120,00:01:17.120,Secondary,,0,0,0,,现在，为什么函数会把另一个函数作为参数？
Dialogue: 0,00:01:17.120,00:01:18.240,Secondary,,0,0,0,,嗯。
Dialogue: 0,00:01:18.240,00:01:21.440,Secondary,,0,0,0,,为什么函数会接受任何参数？
Dialogue: 0,00:01:21.440,00:01:24.640,Secondary,,0,0,0,,嗯，生命的意义是什么？
Dialogue: 0,00:01:24.640,00:01:27.920,Secondary,,0,0,0,,嗯，函数通常接受参数是为了执行某种操作。
Dialogue: 0,00:01:27.920,00:01:30.480,Secondary,,0,0,0,,对它或者与它进行操作。
Dialogue: 0,00:01:30.480,00:01:33.120,Secondary,,0,0,0,,比如，一个把你传进去的任何数字翻倍的函数。
Dialogue: 0,00:01:33.120,00:01:36.640,Secondary,,0,0,0,,我知道这是一个人为的例子，大家都用这个例子，
Dialogue: 0,00:01:36.640,00:01:38.480,Secondary,,0,0,0,,但请耐心等一下。
Dialogue: 0,00:01:38.480,00:01:42.080,Secondary,,0,0,0,,这个函数，这个 double 函数，我们叫它 double，
Dialogue: 0,00:01:42.080,00:01:44.480,Secondary,,0,0,0,,本身并不做任何事，对吗？
Dialogue: 0,00:01:44.480,00:01:48.240,Secondary,,0,0,0,,它确实需要传入的参数。
Dialogue: 0,00:01:48.240,00:01:49.680,Secondary,,0,0,0,,才能完成它的功能。
Dialogue: 0,00:01:49.680,00:01:50.720,Secondary,,0,0,0,,于是它就可以翻倍。
Dialogue: 0,00:01:50.720,00:01:53.040,Secondary,,0,0,0,,如果我给它 5，它给我 10。
Dialogue: 0,00:01:53.040,00:01:55.280,Secondary,,0,0,0,,如果我给它 40，它给我 80。
Dialogue: 0,00:01:55.280,00:01:59.360,Secondary,,0,0,0,,或者另一个函数，接受你的名字并向你打招呼。
Dialogue: 0,00:01:59.360,00:02:01.560,Secondary,,0,0,0,,我传入 Sina，它说 hello Sina。
Dialogue: 0,00:02:01.560,00:02:04.200,Secondary,,0,0,0,,我传入 Oli，它说 hello Oli。
Dialogue: 0,00:02:04.200,00:02:07.320,Secondary,,0,0,0,,一只狗看这边，另一只狗看那边。
Dialogue: 0,00:02:07.640,00:02:09.320,Secondary,,0,0,0,,你知道这来自哪部电影吗？
Dialogue: 0,00:02:09.320,00:02:10.280,Secondary,,0,0,0,,我给你一个提示。
Dialogue: 0,00:02:12.200,00:02:16.040,Secondary,,0,0,0,,无论如何，这两个函数都只需要一个简单的原始类型，对吧？
Dialogue: 0,00:02:16.040,00:02:17.720,Secondary,,0,0,0,,一个数字或字符串。
Dialogue: 0,00:02:17.720,00:02:18.680,Secondary,,0,0,0,,这就是它们所需要的全部。
Dialogue: 0,00:02:18.680,00:02:22.280,Secondary,,0,0,0,,现在，如果一个简单的原始值不够怎么办？
Dialogue: 0,00:02:22.280,00:02:26.440,Secondary,,0,0,0,,如果你的函数需要做更复杂的事情怎么办？
Dialogue: 0,00:02:26.440,00:02:28.280,Secondary,,0,0,0,,你能想到一个例子吗？
Dialogue: 0,00:02:28.280,00:02:30.040,Secondary,,0,0,0,,比如 setTimeout？
Dialogue: 0,00:02:30.040,00:02:31.400,Secondary,,0,0,0,,我的意思是，setTimeout 是什么？
Dialogue: 0,00:02:31.400,00:02:33.240,Secondary,,0,0,0,,那只是一个等待一点时间的函数。
Dialogue: 0,00:02:33.320,00:02:36.120,Secondary,,0,0,0,,然后它执行一系列操作
Dialogue: 0,00:02:36.120,00:02:37.320,Secondary,,0,0,0,,你告诉它该怎么做。
Dialogue: 0,00:02:37.320,00:02:39.080,Secondary,,0,0,0,,但你怎么告诉它？
Dialogue: 0,00:02:39.080,00:02:42.040,Secondary,,0,0,0,,你不能传递一个数字或字符串，对吧？
Dialogue: 0,00:02:42.040,00:02:49.640,Secondary,,0,0,0,,告诉 setTimeout 做某事，用原始值是无法表达的
Dialogue: 0,00:02:49.640,00:02:52.520,Secondary,,0,0,0,,像数字、字符串、布尔值或其他。
Dialogue: 0,00:02:52.520,00:02:54.040,Secondary,,0,0,0,,你需要一个函数来做到这一点。
Dialogue: 0,00:02:54.040,00:02:58.520,Secondary,,0,0,0,,函数是一系列命令，这也是它们特别之处。
Dialogue: 0,00:02:58.520,00:03:01.080,Secondary,,0,0,0,,下面是 MDN 上的 setTimeout API。
Dialogue: 0,00:03:01.080,00:03:04.680,Secondary,,0,0,0,,它接受一个函数，即要执行的操作，以及一个数字，
Dialogue: 0,00:03:04.680,00:03:07.880,Secondary,,0,0,0,,它表示在执行该操作前等待的时间。
Dialogue: 0,00:03:07.880,00:03:08.840,Secondary,,0,0,0,,仅供参考，
Dialogue: 0,00:03:08.840,00:03:13.080,Secondary,,0,0,0,,你可以直接将函数作为表达式传递进去，
Dialogue: 0,00:03:13.080,00:03:15.720,Secondary,,0,0,0,,或者你可以将其存储在变量中，
Dialogue: 0,00:03:15.720,00:03:19.000,Secondary,,0,0,0,,然后将该函数传递进去，或将变量传递进去。
Dialogue: 0,00:03:19.000,00:03:22.200,Secondary,,0,0,0,,但不要在传递时调用该函数。
Dialogue: 0,00:03:22.520,00:03:27.480,Secondary,,0,0,0,,因为那样会把该函数的返回值传递给 setTimeout。
Dialogue: 0,00:03:27.480,00:03:28.280,Secondary,,0,0,0,,你应该知道这一点。
Dialogue: 0,00:03:28.280,00:03:30.920,Secondary,,0,0,0,,那么，还有哪些其他的 higher‑order function？
Dialogue: 0,00:03:30.920,00:03:33.560,Secondary,,0,0,0,,比如说 Array.filter？
Dialogue: 0,00:03:33.560,00:03:36.440,Secondary,,0,0,0,,如果你不知道它如何工作，它是 Array.prototype 上的一个函数，帮助你过滤任何数组。
Dialogue: 0,00:03:36.440,00:03:39.560,Secondary,,0,0,0,,prototype 能帮助你过滤任何数组。
Dialogue: 0,00:03:39.560,00:03:41.800,Secondary,,0,0,0,,假设我有一个名字数组。
Dialogue: 0,00:03:41.960,00:03:44.480,Secondary,,0,0,0,,我想过滤掉所有以 Q 开头的名字，因为没有名字应该
Dialogue: 0,00:03:44.440,00:03:47.040,Secondary,,0,0,0,,const names = [Sina, Sam, Cody, Ben, Zoe, Quentin, Ala];
Dialogue: 0,00:03:48.560,00:03:56.400,Secondary,,0,0,0,,于是我可以说 array.filter，对吧？
Dialogue: 0,00:03:56.400,00:03:58.800,Secondary,,0,0,0,,那我可以说 array.filter，对吧？
Dialogue: 0,00:03:59.120,00:04:04.320,Secondary,,0,0,0,,但是我怎么告诉 filter 函数我的过滤逻辑是怎样的？
Dialogue: 0,00:04:04.320,00:04:09.680,Secondary,,0,0,0,,再次，这只是无法用像字符串和布尔值这样的原始值来表达。
Dialogue: 0,00:04:09.680,00:04:13.120,Secondary,,0,0,0,,我需要编写一些逻辑和一堆 if 语句。
Dialogue: 0,00:04:13.440,00:04:17.200,Secondary,,0,0,0,,还有各种各样的疯狂操作，意味着一个函数。
Dialogue: 0,00:04:17.200,00:04:19.280,Secondary,,0,0,0,,在这种情况下，逻辑相当简单，
Dialogue: 0,00:04:19.280,00:04:23.760,Secondary,,0,0,0,,只是一个返回 false 或 true 的 if 语句。
Dialogue: 0,00:04:23.760,00:04:26.560,Secondary,,0,0,0,,或者你可以使用 arrow 函数，让它更简洁。
Dialogue: 0,00:04:26.560,00:04:30.320,Secondary,,0,0,0,,并且更干净，否则评论区里的人会一直骂我。
Dialogue: 0,00:04:30.320,00:04:31.120,Secondary,,0,0,0,,以下内容。
Dialogue: 0,00:04:31.120,00:04:34.560,Secondary,,0,0,0,,当然，我们可以将过滤后的列表存储在一个变量中，
Dialogue: 0,00:04:34.800,00:04:37.040,Secondary,,0,0,0,,然后我们可以随意处理它。
Dialogue: 0,00:04:37.040,00:04:40.960,Secondary,,0,0,0,,顺便说一句，我在前一集（第 7 集）里讲过 arrow 函数。
Dialogue: 0,00:04:40.960,00:04:42.480,Secondary,,0,0,0,,那是之前的一集。
Dialogue: 0,00:04:42.480,00:04:44.400,Secondary,,0,0,0,,如果你想的话，去看看吧。
Dialogue: 0,00:04:44.400,00:04:46.000,Secondary,,0,0,0,,那么，为什么这很有用？
Dialogue: 0,00:04:46.400,00:04:50.000,Secondary,,0,0,0,,为什么我不能用普通方式过滤列表？
Dialogue: 0,00:04:50.480,00:04:54.800,Secondary,,0,0,0,,我可以使用 for 循环遍历数组，
Dialogue: 0,00:04:54.800,00:04:58.000,Secondary,,0,0,0,,在那里执行相同的逻辑，创建一个新的过滤列表
Dialogue: 0,00:04:58.320,00:05:01.040,Secondary,,0,0,0,,然后返回它或将其存储在一个变量中。
Dialogue: 0,00:05:01.040,00:05:02.160,Secondary,,0,0,0,,结果一样，对吧？
Dialogue: 0,00:05:02.160,00:05:04.480,Secondary,,0,0,0,,Array.filter 有什么大不了的？
Dialogue: 0,00:05:04.480,00:05:06.400,Secondary,,0,0,0,,为什么这么严肃？
Dialogue: 0,00:05:06.400,00:05:09.920,Secondary,,0,0,0,,起初，你可能觉得它并没有帮到你很多。
Dialogue: 0,00:05:09.920,00:05:13.120,Secondary,,0,0,0,,如果你这么想，我能理解。
Dialogue: 0,00:05:13.120,00:05:18.560,Secondary,,0,0,0,,我来自非函数式编程背景，所以 for 循环很熟悉。
Dialogue: 0,00:05:18.560,00:05:19.200,Secondary,,0,0,0,,对我来说。
Dialogue: 0,00:05:19.200,00:05:23.120,Secondary,,0,0,0,,但过滤列表是非常常见的操作。
Dialogue: 0,00:05:23.120,00:05:27.040,Secondary,,0,0,0,,所以，你很可能会多次执行此操作。
Dialogue: 0,00:05:27.040,00:05:30.680,Secondary,,0,0,0,,比如，起初你可能想过滤以 Q 开头的名字，
Dialogue: 0,00:05:30.840,00:05:36.600,Secondary,,0,0,0,,然后你可能想过滤长度为五个字符或以上的名字，
Dialogue: 0,00:05:36.600,00:05:39.160,Secondary,,0,0,0,,然后你可能想把那个列表
Dialogue: 0,00:05:39.160,00:05:42.440,Secondary,,0,0,0,,过滤后的列表转换为 DOM 元素列表。
Dialogue: 0,00:05:42.440,00:05:44.920,Secondary,,0,0,0,,关键是，这是一件非常常见的事情，
Dialogue: 0,00:05:44.920,00:05:47.400,Secondary,,0,0,0,,你会开始注意到其中的模式。
Dialogue: 0,00:05:47.400,00:05:49.800,Secondary,,0,0,0,,而模式是遍历列表，
Dialogue: 0,00:05:49.800,00:05:51.960,Secondary,,0,0,0,,并生成一个新列表。
Dialogue: 0,00:05:51.960,00:05:54.920,Secondary,,0,0,0,,这三次迭代之间唯一不同的只是内部的逻辑，
Dialogue: 0,00:05:54.920,00:05:57.720,Secondary,,0,0,0,,即内部的实际逻辑。
Dialogue: 0,00:05:57.720,00:05:59.480,Secondary,,0,0,0,,或者换个角度来看，
Dialogue: 0,00:05:59.480,00:06:04.200,Secondary,,0,0,0,,你实际上是在重复三次这些步骤。
Dialogue: 0,00:06:04.200,00:06:09.400,Secondary,,0,0,0,,重复往往是一个红旗。
Dialogue: 0,00:06:09.400,00:06:13.000,Secondary,,0,0,0,,因此，在这种情况下使用高阶函数，
Dialogue: 0,00:06:13.000,00:06:15.640,Secondary,,0,0,0,,你可以抽象掉那些重复的步骤，
Dialogue: 0,00:06:15.640,00:06:21.880,Secondary,,0,0,0,,在这种情况下，使用 Array.filter，你只需要关注编写过滤算法，
Dialogue: 0,00:06:21.880,00:06:23.640,Secondary,,0,0,0,,这就是其真正的优势。
Dialogue: 0,00:06:23.640,00:06:26.120,Secondary,,0,0,0,,另一个例子是 Array.map，对吗？
Dialogue: 0,00:06:26.120,00:06:28.280,Secondary,,0,0,0,,我们在 React 中经常使用它，
Dialogue: 0,00:06:28.280,00:06:33.800,Secondary,,0,0,0,,当你有一个数据数组，可能是字符串或其他，
Dialogue: 0,00:06:33.800,00:06:37.880,Secondary,,0,0,0,,并将它们转换为 JSX 元素列表。
Dialogue: 0,00:06:37.880,00:06:41.960,Secondary,,0,0,0,,最终发生的是，你通常会使用高阶函数，
Dialogue: 0,00:06:41.960,00:06:46.520,Secondary,,0,0,0,,并将其与我们称之为一阶函数的其他函数组合。
Dialogue: 0,00:06:46.520,00:06:48.920,Secondary,,0,0,0,,任何不是高阶函数的函数，
Dialogue: 0,00:06:48.920,00:06:51.480,Secondary,,0,0,0,,我们称之为一阶函数。
Dialogue: 0,00:06:51.480,00:06:54.600,Secondary,,0,0,0,,这也意味着你的函数更小，对吧？
Dialogue: 0,00:06:54.600,00:06:57.400,Secondary,,0,0,0,,如果你想测试你的代码，
Dialogue: 0,00:06:57.400,00:06:58.840,Secondary,,0,0,0,,你应该测试你的代码。
Dialogue: 0,00:06:58.840,00:07:03.480,Secondary,,0,0,0,,这使得更容易，因为现在你的函数更小、更模块化。
Dialogue: 0,00:07:03.480,00:07:05.720,Secondary,,0,0,0,,它们只做一件事。
Dialogue: 0,00:07:05.720,00:07:12.200,Secondary,,0,0,0,,没有高阶函数，我们就没有 Array.filter、Array.map 或 Array.reduce，
Dialogue: 0,00:07:12.200,00:07:13.800,Secondary,,0,0,0,,那将是一个悲哀的世界。
Dialogue: 0,00:07:15.760,00:07:19.440,Secondary,,0,0,0,,我还会给你一个返回函数的例子。
Dialogue: 0,00:07:19.680,00:07:24.640,Secondary,,0,0,0,,记住，higher-order function：我之前给出的定义是 higher-order function，
Dialogue: 0,00:07:24.640,00:07:29.120,Secondary,,0,0,0,,higher-order function 要么接受一个参数，要么返回一个函数。
Dialogue: 0,00:07:29.120,00:07:33.440,Secondary,,0,0,0,,这实际上是 MDN 页面上一个相当好的实用例子。
Dialogue: 0,00:07:33.600,00:07:36.320,Secondary,,0,0,0,,解释所有关于 closure 的内容。
Dialogue: 0,00:07:36.320,00:07:39.280,Secondary,,0,0,0,,顺便说一下，下一集（第9集）的主题是。
Dialogue: 0,00:07:39.600,00:07:41.600,Secondary,,0,0,0,,比如说页面上有三个按钮，
Dialogue: 0,00:07:41.760,00:07:45.200,Secondary,,0,0,0,,它们都做同样的事，但略有不同。
Dialogue: 0,00:07:45.200,00:07:49.200,Secondary,,0,0,0,,比如它们都改变页面的字体大小，
Dialogue: 0,00:07:49.200,00:07:55.120,Secondary,,0,0,0,,分别为12、14 或 16，取决于哪个按钮被点击。
Dialogue: 0,00:07:55.120,00:07:57.760,Secondary,,0,0,0,,不必像那样三次写相同的逻辑，
Dialogue: 0,00:07:57.760,00:08:00.640,Secondary,,0,0,0,,你可以抽象出包含这些逻辑，
Dialogue: 0,00:08:00.640,00:08:05.680,Secondary,,0,0,0,,找到 body 标签并更改字体大小的 CSS 值，
Dialogue: 0,00:08:05.680,00:08:07.200,Secondary,,0,0,0,,到任何你想要的值。
Dialogue: 0,00:08:07.200,00:08:13.280,Secondary,,0,0,0,,然后你创建一个 function factory，生成并返回函数，
Dialogue: 0,00:08:13.280,00:08:16.880,Secondary,,0,0,0,,这些函数随后会用作每个按钮的点击处理器。
Dialogue: 0,00:08:16.880,00:08:21.200,Secondary,,0,0,0,,顺便说一下，function factory 与 factory function 不同，
Dialogue: 0,00:08:21.200,00:08:23.120,Secondary,,0,0,0,,它们是完全不同的东西。
Dialogue: 0,00:08:23.120,00:08:28.480,Secondary,,0,0,0,,这样，你只需在你的 higher-order function 内编写一次逻辑，
Dialogue: 0,00:08:29.040,00:08:33.200,Secondary,,0,0,0,,然后根据调用它的按钮传入参数。
Dialogue: 0,00:08:33.200,00:08:38.400,Secondary,,0,0,0,,所以每个按钮本质上都获得了一个在内部创建的那个函数的副本。
Dialogue: 0,00:08:38.400,00:08:44.240,Secondary,,0,0,0,,该高阶函数具有自己的特定字体大小逻辑。
Dialogue: 0,00:08:44.240,00:08:46.240,Secondary,,0,0,0,,直接嵌入到逻辑本身中。
Dialogue: 0,00:08:46.240,00:08:50.880,Secondary,,0,0,0,,该函数工厂是一个返回函数的高阶函数示例，
Dialogue: 0,00:08:50.880,00:08:54.480,Secondary,,0,0,0,,返回一个函数给你，并且希望你能看到它的实用性。
Dialogue: 0,00:08:54.480,00:08:56.640,Secondary,,0,0,0,,好了，这集视频较短，
Dialogue: 0,00:08:56.640,00:08:58.800,Secondary,,0,0,0,,但它是我最喜欢讨论的话题之一。
Dialogue: 0,00:08:58.800,00:09:00.680,Secondary,,0,0,0,,今天我没有进行任何现场编码，
Dialogue: 0,00:09:00.760,00:09:05.400,Secondary,,0,0,0,,在测试这个新格式的过程中，希望你能理解。
Dialogue: 0,00:09:05.400,00:09:06.760,Secondary,,0,0,0,,希望你喜欢。
Dialogue: 0,00:09:07.000,00:09:10.040,Secondary,,0,0,0,,如果你最近遇到过任何高阶函数的例子，请在评论中告诉我。
Dialogue: 0,00:09:10.040,00:09:11.720,Secondary,,0,0,0,,告诉我你对这个新格式的看法。
Dialogue: 0,00:09:11.720,00:09:13.480,Secondary,,0,0,0,,以及你对我新工作室的看法。
Dialogue: 0,00:09:13.480,00:09:15.560,Secondary,,0,0,0,,我搬走了，无法再从窗外看到纽约市的景色，
Dialogue: 0,00:09:15.560,00:09:20.840,Secondary,,0,0,0,,但现在我处在一个封闭的空间里。
Dialogue: 0,00:09:20.840,00:09:23.000,Secondary,,0,0,0,,不过，感谢观看。
Dialogue: 0,00:09:23.000,00:09:25.640,Secondary,,0,0,0,,这是这十集系列中的第八集。
Dialogue: 0,00:09:25.640,00:09:27.080,Secondary,,0,0,0,,我把它叫做《JavaScript 开发者应该知道但可能不会知道的十件事》。
Dialogue: 0,00:09:27.080,00:09:30.440,Secondary,,0,0,0,,这是这部十集系列的第八集。
Dialogue: 0,00:09:30.440,00:09:35.560,Secondary,,0,0,0,,我称之为《JavaScript 开发者应该知道但可能不知道的十件事》。
Dialogue: 0,00:09:35.560,00:09:41.560,Secondary,,0,0,0,,正如我所说，下一集，第九集，将专注于闭包，
Dialogue: 0,00:09:41.560,00:09:45.160,Secondary,,0,0,0,,JavaScript 的惊人功能。
Dialogue: 0,00:09:45.160,00:09:46.440,Secondary,,0,0,0,,期待在那里见到你。
Dialogue: 0,00:09:46.760,00:09:47.800,Secondary,,0,0,0,,Sala。
Dialogue: 0,00:00:00.240,00:00:04.320,Default,,0,0,0,,If you use the term higher order functions, you are a cool person.
Dialogue: 0,00:00:04.320,00:00:06.800,Default,,0,0,0,,Yeah, I just hope you know what it means.
Dialogue: 0,00:00:06.800,00:00:08.480,Default,,0,0,0,,So, higher order functions.
Dialogue: 0,00:00:08.480,00:00:12.320,Default,,0,0,0,,In this video, I'll tell you what they are and why they're useful.
Dialogue: 0,00:00:12.480,00:00:15.600,Default,,0,0,0,,And how you can use them to your advantage.
Dialogue: 0,00:00:15.600,00:00:19.680,Default,,0,0,0,,This is a 10-part series I'm calling '10 Things JavaScript Developers Should Know,' but probably don't.
Dialogue: 0,00:00:19.680,00:00:21.040,Default,,0,0,0,,but probably don't.
Dialogue: 0,00:00:21.040,00:00:24.480,Default,,0,0,0,,This is episode 8: Higher Order Functions.
Dialogue: 0,00:00:24.800,00:00:28.880,Default,,0,0,0,,And yes, I'm in my new studio, which I'll talk about later.
Dialogue: 0,00:00:28.880,00:00:30.080,Default,,0,0,0,,Let's go.
Dialogue: 0,00:00:38.000,00:00:42.160,Default,,0,0,0,,Higher order functions have been getting a lot of attention in the past few years.
Dialogue: 0,00:00:42.160,00:00:44.000,Default,,0,0,0,,In the past few years, they've been heavily used.
Dialogue: 0,00:00:44.080,00:00:47.280,Default,,0,0,0,,In a lot of new patterns, it seems they have come to JavaScript,
Dialogue: 0,00:00:47.280,00:00:50.080,Default,,0,0,0,,mainly thanks to functional programming.
Dialogue: 0,00:00:50.080,00:00:53.600,Default,,0,0,0,,And in no small part, thanks to this guy, React.
Dialogue: 0,00:00:53.760,00:00:55.760,Default,,0,0,0,,I see you, React babies.
Dialogue: 0,00:00:55.760,00:01:01.120,Default,,0,0,0,,Now, React didn't really invent any of these patterns; it just really popularized them.
Dialogue: 0,00:01:01.120,00:01:02.640,Default,,0,0,0,,So, higher order functions.
Dialogue: 0,00:01:02.640,00:01:07.680,Default,,0,0,0,,A higher order function is a function that accepts another function as a parameter.
Dialogue: 0,00:01:07.920,00:01:10.960,Default,,0,0,0,,or returns a function back to you.
Dialogue: 0,00:01:10.960,00:01:13.120,Default,,0,0,0,,Once it's done doing what it's supposed to do.
Dialogue: 0,00:01:13.120,00:01:17.120,Default,,0,0,0,,Now, why would a function take another function as a parameter?
Dialogue: 0,00:01:17.120,00:01:18.240,Default,,0,0,0,,Hmm.
Dialogue: 0,00:01:18.240,00:01:21.440,Default,,0,0,0,,Why would a function take any parameter at all?
Dialogue: 0,00:01:21.440,00:01:24.640,Default,,0,0,0,,Hmm, what is the meaning of life?
Dialogue: 0,00:01:24.640,00:01:27.920,Default,,0,0,0,,Well, a function takes a parameter usually to perform some kind of operation.
Dialogue: 0,00:01:27.920,00:01:30.480,Default,,0,0,0,,of operation on it or with it.
Dialogue: 0,00:01:30.480,00:01:33.120,Default,,0,0,0,,Say a function that doubles any number you pass to it.
Dialogue: 0,00:01:33.120,00:01:36.640,Default,,0,0,0,,I know it's a contrived example, and everybody uses this example,
Dialogue: 0,00:01:36.640,00:01:38.480,Default,,0,0,0,,but just bear with me for a second.
Dialogue: 0,00:01:38.480,00:01:42.080,Default,,0,0,0,,This function, this double function, we call it double,
Dialogue: 0,00:01:42.080,00:01:44.480,Default,,0,0,0,,on its own doesn't do anything, right?
Dialogue: 0,00:01:44.480,00:01:48.240,Default,,0,0,0,,It really needs the incoming parameter in order.
Dialogue: 0,00:01:48.240,00:01:49.680,Default,,0,0,0,,to do what it's supposed to do.
Dialogue: 0,00:01:49.680,00:01:50.720,Default,,0,0,0,,So it can double it.
Dialogue: 0,00:01:50.720,00:01:53.040,Default,,0,0,0,,If I give it five, it gives me 10.
Dialogue: 0,00:01:53.040,00:01:55.280,Default,,0,0,0,,If I give it 40, it gives me 80.
Dialogue: 0,00:01:55.280,00:01:59.360,Default,,0,0,0,,Or another function that takes your name and says hello to you.
Dialogue: 0,00:01:59.360,00:02:01.560,Default,,0,0,0,,I pass it Sina, it says hello Sina.
Dialogue: 0,00:02:01.560,00:02:04.200,Default,,0,0,0,,I pass it Oli, it says hello, Oli.
Dialogue: 0,00:02:04.200,00:02:07.320,Default,,0,0,0,,One dog looks this way, the other dog looks the other way.
Dialogue: 0,00:02:07.640,00:02:09.320,Default,,0,0,0,,Do you know what movie that's from?
Dialogue: 0,00:02:09.320,00:02:10.280,Default,,0,0,0,,I'll give you a hint.
Dialogue: 0,00:02:12.200,00:02:16.040,Default,,0,0,0,,Anyway, both of these functions take a simple primitive type, right?
Dialogue: 0,00:02:16.040,00:02:17.720,Default,,0,0,0,,A number or a string.
Dialogue: 0,00:02:17.720,00:02:18.680,Default,,0,0,0,,And that's all they need.
Dialogue: 0,00:02:18.680,00:02:22.280,Default,,0,0,0,,Now, what if a simple primitive value wasn't enough?
Dialogue: 0,00:02:22.280,00:02:26.440,Default,,0,0,0,,What if your function had to do something a lot more complicated?
Dialogue: 0,00:02:26.440,00:02:28.280,Default,,0,0,0,,Can you think of an example?
Dialogue: 0,00:02:28.280,00:02:30.040,Default,,0,0,0,,Well, how about setTimeout?
Dialogue: 0,00:02:30.040,00:02:31.400,Default,,0,0,0,,I mean, what is setTimeout?
Dialogue: 0,00:02:31.400,00:02:33.240,Default,,0,0,0,,That's just a function that waits a little bit.
Dialogue: 0,00:02:33.320,00:02:36.120,Default,,0,0,0,,And then it performs a series of operations
Dialogue: 0,00:02:36.120,00:02:37.320,Default,,0,0,0,,that you tell it to do.
Dialogue: 0,00:02:37.320,00:02:39.080,Default,,0,0,0,,But how do you tell it?
Dialogue: 0,00:02:39.080,00:02:42.040,Default,,0,0,0,,You can't pass a number or a string, right?
Dialogue: 0,00:02:42.040,00:02:49.640,Default,,0,0,0,,Telling setTimeout to do something is impossible to express using primitive values
Dialogue: 0,00:02:49.640,00:02:52.520,Default,,0,0,0,,like a number or a string or a Boolean or whatnot.
Dialogue: 0,00:02:52.520,00:02:54.040,Default,,0,0,0,,You need a function for that.
Dialogue: 0,00:02:54.040,00:02:58.520,Default,,0,0,0,,Functions are a series of commands, and that's what makes them special.
Dialogue: 0,00:02:58.520,00:03:01.080,Default,,0,0,0,,Here's a setTimeout API on MDN.
Dialogue: 0,00:03:01.080,00:03:04.680,Default,,0,0,0,,It takes a function, which is what to do, and a number,
Dialogue: 0,00:03:04.680,00:03:07.880,Default,,0,0,0,,which is how long to wait before doing that thing.
Dialogue: 0,00:03:07.880,00:03:08.840,Default,,0,0,0,,And just for reference,
Dialogue: 0,00:03:08.840,00:03:13.080,Default,,0,0,0,,you can pass the function directly into it as an expression,
Dialogue: 0,00:03:13.080,00:03:15.720,Default,,0,0,0,,or you can store it inside a variable,
Dialogue: 0,00:03:15.720,00:03:19.000,Default,,0,0,0,,and pass it, and pass the variable to it.
Dialogue: 0,00:03:19.000,00:03:22.200,Default,,0,0,0,,Just don't invoke the function when you pass it in.
Dialogue: 0,00:03:22.520,00:03:27.480,Default,,0,0,0,,because then you are passing the return value of that function into setTimeout.
Dialogue: 0,00:03:27.480,00:03:28.280,Default,,0,0,0,,You should know that.
Dialogue: 0,00:03:28.280,00:03:30.920,Default,,0,0,0,,So now what are some other higher‑order functions?
Dialogue: 0,00:03:30.920,00:03:33.560,Default,,0,0,0,,Well, how about Array.filter?
Dialogue: 0,00:03:33.560,00:03:36.440,Default,,0,0,0,,In case you don't know how it works, it's a function on the Array.prototype that helps you filter any array.
Dialogue: 0,00:03:36.440,00:03:39.560,Default,,0,0,0,,prototype that helps you filter any array.
Dialogue: 0,00:03:39.560,00:03:41.800,Default,,0,0,0,,So say I have an array of names.
Dialogue: 0,00:03:41.960,00:03:44.480,Default,,0,0,0,,and I want to filter out all the ones that start with a Q, because no name should ever
Dialogue: 0,00:03:44.440,00:03:47.040,Default,,0,0,0,,const names = [Sina, Sam, Cody, Ben, Zoe, Quentin, Ala];
Dialogue: 0,00:03:48.560,00:03:56.400,Default,,0,0,0,,So I can say array.filter, right?
Dialogue: 0,00:03:56.400,00:03:58.800,Default,,0,0,0,,So I can say array.filter, right?
Dialogue: 0,00:03:59.120,00:04:04.320,Default,,0,0,0,,But how can I tell the filter function what my filtering logic is?
Dialogue: 0,00:04:04.320,00:04:09.680,Default,,0,0,0,,Again, it's just impossible to express that using primitive values like strings and booleans.
Dialogue: 0,00:04:09.680,00:04:13.120,Default,,0,0,0,,I'm going to need to write some logic and a bunch of if statements.
Dialogue: 0,00:04:13.440,00:04:17.200,Default,,0,0,0,,And all sorts of crazy stuff, meaning a function.
Dialogue: 0,00:04:17.200,00:04:19.280,Default,,0,0,0,,So in this case, the logic is pretty simple,
Dialogue: 0,00:04:19.280,00:04:23.760,Default,,0,0,0,,just an if statement that returns false or true.
Dialogue: 0,00:04:23.760,00:04:26.560,Default,,0,0,0,,Or you can use an arrow function and make it a little nicer.
Dialogue: 0,00:04:26.560,00:04:30.320,Default,,0,0,0,,And cleaner because otherwise everyone will yell at me in the comment section.
Dialogue: 0,00:04:30.320,00:04:31.120,Default,,0,0,0,,And below.
Dialogue: 0,00:04:31.120,00:04:34.560,Default,,0,0,0,,And of course, we can store the filtered list inside a variable,
Dialogue: 0,00:04:34.800,00:04:37.040,Default,,0,0,0,,and we can do whatever we want with it.
Dialogue: 0,00:04:37.040,00:04:40.960,Default,,0,0,0,,By the way, I covered arrow functions in the previous episode (episode 7).
Dialogue: 0,00:04:40.960,00:04:42.480,Default,,0,0,0,,That's the one before this.
Dialogue: 0,00:04:42.480,00:04:44.400,Default,,0,0,0,,So go check it out if you want.
Dialogue: 0,00:04:44.400,00:04:46.000,Default,,0,0,0,,So now, why is this useful?
Dialogue: 0,00:04:46.400,00:04:50.000,Default,,0,0,0,,Why can't I just filter the list the regular way?
Dialogue: 0,00:04:50.480,00:04:54.800,Default,,0,0,0,,I can just iterate over the array using a for loop,
Dialogue: 0,00:04:54.800,00:04:58.000,Default,,0,0,0,,do the same logic there, create a new filtered list
Dialogue: 0,00:04:58.320,00:05:01.040,Default,,0,0,0,,and return it or store it inside a variable.
Dialogue: 0,00:05:01.040,00:05:02.160,Default,,0,0,0,,Same results, right?
Dialogue: 0,00:05:02.160,00:05:04.480,Default,,0,0,0,,What's the big deal with Array.filter?
Dialogue: 0,00:05:04.480,00:05:06.400,Default,,0,0,0,,Why so serious?
Dialogue: 0,00:05:06.400,00:05:09.920,Default,,0,0,0,,At first, it may not seem like it's doing much for you.
Dialogue: 0,00:05:09.920,00:05:13.120,Default,,0,0,0,,And if you think that, I understand you.
Dialogue: 0,00:05:13.120,00:05:18.560,Default,,0,0,0,,I come from a non-functional programming background, and so for loops are very familiar.
Dialogue: 0,00:05:18.560,00:05:19.200,Default,,0,0,0,,to me.
Dialogue: 0,00:05:19.200,00:05:23.120,Default,,0,0,0,,But filtering a list is a very common thing to do.
Dialogue: 0,00:05:23.120,00:05:27.040,Default,,0,0,0,,So, chances are you're going to want to do this more than once.
Dialogue: 0,00:05:27.040,00:05:30.680,Default,,0,0,0,,Maybe at first you want to filter the names starting with Q,
Dialogue: 0,00:05:30.840,00:05:36.600,Default,,0,0,0,,then maybe you want to filter the ones that have five or more characters,
Dialogue: 0,00:05:36.600,00:05:39.160,Default,,0,0,0,,and then maybe you want to turn that list,
Dialogue: 0,00:05:39.160,00:05:42.440,Default,,0,0,0,,that filtered list into a list of DOM elements.
Dialogue: 0,00:05:42.440,00:05:44.920,Default,,0,0,0,,The point is, this is a very common thing to do,
Dialogue: 0,00:05:44.920,00:05:47.400,Default,,0,0,0,,and you'll start to notice a pattern here.
Dialogue: 0,00:05:47.400,00:05:49.800,Default,,0,0,0,,And the pattern is iterating over a list,
Dialogue: 0,00:05:49.800,00:05:51.960,Default,,0,0,0,,and creating a new list out of it.
Dialogue: 0,00:05:51.960,00:05:54.920,Default,,0,0,0,,The only thing that's different between these three iterations,
Dialogue: 0,00:05:54.920,00:05:57.720,Default,,0,0,0,,is the actual logic on the inside itself.
Dialogue: 0,00:05:57.720,00:05:59.480,Default,,0,0,0,,Or another way to look at it,
Dialogue: 0,00:05:59.480,00:06:04.200,Default,,0,0,0,,is that you're repeating a lot of these steps three times.
Dialogue: 0,00:06:04.200,00:06:09.400,Default,,0,0,0,,Repetition is almost always a red flag.
Dialogue: 0,00:06:09.400,00:06:13.000,Default,,0,0,0,,Using a higher-order function in this case,
Dialogue: 0,00:06:13.000,00:06:15.640,Default,,0,0,0,,You can abstract away those repetitive steps,
Dialogue: 0,00:06:15.640,00:06:21.880,Default,,0,0,0,,In this case, using Array.filter, you only need to worry about writing the filtering algorithm.
Dialogue: 0,00:06:21.880,00:06:23.640,Default,,0,0,0,,That's the real benefit here.
Dialogue: 0,00:06:23.640,00:06:26.120,Default,,0,0,0,,Another example is Array.map, right?
Dialogue: 0,00:06:26.120,00:06:28.280,Default,,0,0,0,,We use this in React all the time,
Dialogue: 0,00:06:28.280,00:06:33.800,Default,,0,0,0,,where you have an array of some data, maybe a string or something,
Dialogue: 0,00:06:33.800,00:06:37.880,Default,,0,0,0,,and you convert them into a list of JSX elements.
Dialogue: 0,00:06:37.880,00:06:41.960,Default,,0,0,0,,What ends up happening is you typically use a higher-order function,
Dialogue: 0,00:06:41.960,00:06:46.520,Default,,0,0,0,,and combine it with these other functions, which we call first-order functions.
Dialogue: 0,00:06:46.520,00:06:48.920,Default,,0,0,0,,Any function that's not a higher-order function,
Dialogue: 0,00:06:48.920,00:06:51.480,Default,,0,0,0,,that's what we call them, a first-order function.
Dialogue: 0,00:06:51.480,00:06:54.600,Default,,0,0,0,,This also means your functions are smaller, right?
Dialogue: 0,00:06:54.600,00:06:57.400,Default,,0,0,0,,If you ever wanted to test your code,
Dialogue: 0,00:06:57.400,00:06:58.840,Default,,0,0,0,,you should test your code.
Dialogue: 0,00:06:58.840,00:07:03.480,Default,,0,0,0,,This makes it a lot easier because now your functions are smaller and modularized.
Dialogue: 0,00:07:03.480,00:07:05.720,Default,,0,0,0,,They do one thing and one thing only.
Dialogue: 0,00:07:05.720,00:07:12.200,Default,,0,0,0,,Without higher-order functions, we wouldn't have Array.filter, Array.map or Array.reduce,
Dialogue: 0,00:07:12.200,00:07:13.800,Default,,0,0,0,,and that's a sad world.
Dialogue: 0,00:07:15.760,00:07:19.440,Default,,0,0,0,,I'll also give you an example of one that returns a function.
Dialogue: 0,00:07:19.680,00:07:24.640,Default,,0,0,0,,Remember, higher-order function: the definition I gave you was that higher-order function,
Dialogue: 0,00:07:24.640,00:07:29.120,Default,,0,0,0,,Higher-order functions either take a parameter or they can also return a function.
Dialogue: 0,00:07:29.120,00:07:33.440,Default,,0,0,0,,This is a pretty good practical example that's actually on MDN's page.
Dialogue: 0,00:07:33.600,00:07:36.320,Default,,0,0,0,,explaining closures of all things.
Dialogue: 0,00:07:36.320,00:07:39.280,Default,,0,0,0,,The topic of next episode, by the way, episode 9.
Dialogue: 0,00:07:39.600,00:07:41.600,Default,,0,0,0,,So say you have three buttons on the page,
Dialogue: 0,00:07:41.760,00:07:45.200,Default,,0,0,0,,and all they do is the same thing but slightly differently.
Dialogue: 0,00:07:45.200,00:07:49.200,Default,,0,0,0,,Like they all change the font size of the page,
Dialogue: 0,00:07:49.200,00:07:55.120,Default,,0,0,0,,to 12, 14, or 16, depending on which button was clicked.
Dialogue: 0,00:07:55.120,00:07:57.760,Default,,0,0,0,,Instead of writing this logic three times like that,
Dialogue: 0,00:07:57.760,00:08:00.640,Default,,0,0,0,,you abstract away the logic that includes, you know,
Dialogue: 0,00:08:00.640,00:08:05.680,Default,,0,0,0,,finding the body tag and changing the CSS value of the font size,
Dialogue: 0,00:08:05.680,00:08:07.200,Default,,0,0,0,,to whatever it is.
Dialogue: 0,00:08:07.200,00:08:13.280,Default,,0,0,0,,And you create a function factory that generates and returns functions,
Dialogue: 0,00:08:13.280,00:08:16.880,Default,,0,0,0,,that then will be used as click handlers for each of those buttons.
Dialogue: 0,00:08:16.880,00:08:21.200,Default,,0,0,0,,By the way, function factory is not to be confused with factory functions,
Dialogue: 0,00:08:21.200,00:08:23.120,Default,,0,0,0,,two totally different things.
Dialogue: 0,00:08:23.120,00:08:28.480,Default,,0,0,0,,This way, you write the logic one time inside your higher order function,
Dialogue: 0,00:08:29.040,00:08:33.200,Default,,0,0,0,,and you take a parameter based on which button is calling it.
Dialogue: 0,00:08:33.200,00:08:38.400,Default,,0,0,0,,So each button essentially gets a copy of that function that was created inside.
Dialogue: 0,00:08:38.400,00:08:44.240,Default,,0,0,0,,The higher-order function has its own specific font-size logic.
Dialogue: 0,00:08:44.240,00:08:46.240,Default,,0,0,0,,Baked into the logic itself.
Dialogue: 0,00:08:46.240,00:08:50.880,Default,,0,0,0,,That function factory is an example of a higher-order function that returns
Dialogue: 0,00:08:50.880,00:08:54.480,Default,,0,0,0,,a function back to you, and hopefully you see the utility of it.
Dialogue: 0,00:08:54.480,00:08:56.640,Default,,0,0,0,,All right, this was a shorter episode,
Dialogue: 0,00:08:56.640,00:08:58.800,Default,,0,0,0,,but one of my favorite topics to talk about.
Dialogue: 0,00:08:58.800,00:09:00.680,Default,,0,0,0,,And I didn't do any live coding today,
Dialogue: 0,00:09:00.760,00:09:05.400,Default,,0,0,0,,while testing this new format, but hopefully it made sense.
Dialogue: 0,00:09:05.400,00:09:06.760,Default,,0,0,0,,Hopefully, you liked that.
Dialogue: 0,00:09:07.000,00:09:10.040,Default,,0,0,0,,Let me know in the comments if you have an example of a higher-order function that you've run into recently.
Dialogue: 0,00:09:10.040,00:09:11.720,Default,,0,0,0,,Let me know what you think about this new format.
Dialogue: 0,00:09:11.720,00:09:13.480,Default,,0,0,0,,and what you think about my new studio.
Dialogue: 0,00:09:13.480,00:09:15.560,Default,,0,0,0,,I have moved, and I will no longer be able to see a New York City view from outside my windows,
Dialogue: 0,00:09:15.560,00:09:20.840,Default,,0,0,0,,but I'm in a closed box right now.
Dialogue: 0,00:09:20.840,00:09:23.000,Default,,0,0,0,,But yeah, thanks for watching.
Dialogue: 0,00:09:23.000,00:09:25.640,Default,,0,0,0,,This was episode eight of this 10-part series.
Dialogue: 0,00:09:25.640,00:09:27.080,Default,,0,0,0,,I'm calling it 10 Things JavaScript Developers Should Know, but Probably Don't.
Dialogue: 0,00:09:27.080,00:09:30.440,Default,,0,0,0,,This was episode eight of this 10-part series.
Dialogue: 0,00:09:30.440,00:09:35.560,Default,,0,0,0,,I'm calling 10 Things JavaScript Developers Should Know, but Probably Don't.
Dialogue: 0,00:09:35.560,00:09:41.560,Default,,0,0,0,,And as I mentioned, the next episode, episode 9, will be dedicated to closures,
Dialogue: 0,00:09:41.560,00:09:45.160,Default,,0,0,0,,an amazing, amazing feature of JavaScript.
Dialogue: 0,00:09:45.160,00:09:46.440,Default,,0,0,0,,Hope to see you there.
Dialogue: 0,00:09:46.760,00:09:47.800,Default,,0,0,0,,Sala.
